SQRT MUDULE -----------------------------------------------------------------------------------
module sqrt3(
	input clk_c_i,
	input rst_c_i,
	input start_c_i,
	input [7:0] x_i,
	output reg [7:0] y_o,
	output reg busy_o
);

localparam STAGE_0 = 2'b00;
localparam STAGE_1 = 2'b01;
localparam STAGE_2 = 2'b10;
localparam FINISH = 8'b11;


reg [7:0] y;
integer b;
reg state;

reg mul_clk_i;
reg mul_rst_i;
reg mul_start_i;
reg [15:0] mul_a_bi;
reg [15:0] mul_b_bi;
wire mul_busy_o;
wire [15:0] mul_y_bo;


mult multiplay(
    .clk_i(mul_clk_i),
	.rst_i(mul_rst_i),
	.a_bi(mul_a_bi),
	.b_bi(mul_b_bi),
	.start_i(mul_start_i),
	.busy_o(mul_busy_o),
	.y_bo(mul_y_bo)
);

integer i;

always@(posedge clk_c_i)
	if (rst_c_i) begin
	   $display( " ## new rst " );
	    busy_o <= 1;
	    state <= STAGE_0;
	    y <= 6;
	    y_o <= 0;
	end else begin
		case(state)
			STAGE_0: if (start_c_i) begin
					$display(" ## state = STAGE_0,  x = %d ", x_i);
					// calc y^2 = y * y
					mul_clk_i = 0; mul_rst_i = 1; mul_start_i = 1;
					mul_a_bi = y; mul_b_bi = y;
					#1 mul_clk_i = 1; mul_rst_i = 1;
					#1 mul_clk_i = 0; mul_rst_i = 0;
					
				    #1 mul_clk_i = 1; 
	                #1 mul_clk_i = 0;
					
					state <= 1;
					
					$display(" ## go to state = STAGE_1   real_state = %d", state);
				end
			STAGE_1: if(mul_busy_o == 0) begin
				    $display(" ## state = %d, x = %d ", state, x_i);
				    state <= 2;
					
				    // calc y^3 = y^2 * y 
					$display(" ##  y_bo = %d ", mul_y_bo);
					mul_clk_i = 0; mul_rst_i = 1; mul_start_i = 1;
					mul_a_bi = mul_y_bo; mul_b_bi = y;
					#1 mul_clk_i = 1; mul_rst_i = 1;
					#1 mul_clk_i = 0; mul_rst_i = 0;
					
					#1 mul_clk_i = 1; 
	                #1 mul_clk_i = 0;
					
					
					$display(" ## go to state = STAGE_2   real_state = %d", state); 
				end else begin
				
					$display(" ## waiting in state = STAGE_1     real_state = %d", state);
				    #1 mul_clk_i = 1; 
	                #1 mul_clk_i = 0;
	            end
			STAGE_2 : if(mul_busy_o == 0) begin
			    $display(" ## state = %d  y_bo = %d  x = %d y = %d", state, mul_y_bo, x_i, y);
				if (mul_y_bo <= x_i) begin
                    y_o = y;
                    busy_o = 0;
                    state <= 3;
                end
                else begin 
				    y <= y - 1;
                    state <= 1;
                end
			end else begin
                $display(" ## waitng in state = STAGE_2 real_state = %d", state);
                #1 mul_clk_i = 1; 
                #1 mul_clk_i = 0;
	        end
			FINISH : begin
			    y_o = y;
			    busy_o = 0;
			end
		endcase
	end
endmodule 


TEsting MODULE -----------------------------------------------------------------------------------------


module sqrt3_tb;
reg clk_c_i;
reg rst_c_i;
reg start_c_i;
reg [7:0] x_i;
wire res_o;
wire [7:0] s_o;

sqrt3 dut(.clk_c_i(clk_c_i),
		  .rst_c_i(rst_c_i),
		  .start_c_i(start_c_i),
		  .x_i(x_i),
		  .busy_o(res_o),
		  .y_o(s_o)
);

integer i, xx, bb, kol_ok, kol_error;

initial
	begin
		$display("Start testing ");
		// $monitor("c = %b, res = %d, r = %b, time = %0d", clk_c_i, s_o, res_o, $time);
		kol_ok = 0;
		kol_error = 0;
		for(xx = 9; xx <= 9; xx = xx + 1) begin
            clk_c_i = 0; rst_c_i = 1; start_c_i=1; x_i = xx;
            #10 clk_c_i = 1; rst_c_i = 1;
            #10 clk_c_i = 0; rst_c_i = 0;
            for (i = 0; i < 150; i = i + 1) begin
                #100 clk_c_i = 1;
                #100 clk_c_i = 0;
            end
            
            bb = 0;
            while(bb * bb * bb <= xx) begin
                bb = bb + 1;
            end
            bb = bb - 1;
            
            if(bb != s_o) begin 
                kol_error = kol_error + 1; 
                $display("~~~ Error number x = %d, real result = %d, expected result = %d, time = %0d", xx, s_o, bb, $time);
            end 
            else begin
                kol_ok = kol_ok + 1;
                $display("~~~ OK number x = %d, real result = %d, expected result = %d, time = %0d", xx, s_o, bb, $time);
            end
	   end
	   $display(" ~~~ Testing is finished ");
	   $display(" ~~~ kol_OK = %d, kol_Error = %d ", kol_ok, kol_error);
	   #10 $stop;
	end
endmodule 

