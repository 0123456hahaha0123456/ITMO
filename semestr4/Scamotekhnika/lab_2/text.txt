Схема умножения -----------------------------------------------------------------------------

module mult(
	input clk_i,
	input rst_i,
	input [7:0] a_bi,
	input [7:0] b_bi,
	input start_i,
	output busy_o,
	output reg [15:0] y_bo
);

localparam IDLE = 1'b0;
localparam WORK = 1'b1;

reg [2:0] ctr;
wire [2:0] ctr_next, end_step;
wire [7:0] part_sum;
wire [15:0] shifted_p;
reg [7:0] a, b;
reg [15:0] part_res;
reg state;

assign part_sum = a & {8{b[ctr]}};
assign shifted_p = part_sum << ctr;
assign ctr_next = ctr + 1;
assign end_step = (ctr == 3'h7);
assign busy_o = state;

always@(posedge clk_i)
	if(rst_i) begin
		ctr <= 0;
		part_res <= 0;
		y_bo <= 0;
		state <= IDLE;
	end else begin
		case(state)
			IDLE:
				if(start_i) begin
					state <= WORK;
					a <= a_bi;
					b <= b_bi;
					ctr <= 0;
					part_res <= 0;
				end
			WORK: begin
				if(end_step) begin
					state <= IDLE;
					y_bo <= part_res;
				end
				part_res = part_res + shifted_p;
				ctr <= ctr + 1;
			end
		endcase
	end
endmodule 


Схема вычисления кубического корня -----------------------------------------------------------------------------
module sqrt3(
	input clk_c_i,
	input rst_c_i,
	input start_c_i,
	input [7:0] x_i,
	output reg [7:0] y_o,
	output reg busy_o
);

localparam BEGIN = 2'b00;
localparam STAGE_1 = 2'b01;
localparam STAGE_2 = 2'b10;
localparam FINISH = 8'b11;


reg [7:0] y;
integer b;
reg state;

reg mul_clk_i;
reg mul_rst_i;
reg mul_start_i;
reg [15:0] mul_a_bi;
reg [15:0] mul_b_bi;
wire mul_busy_o;
wire [15:0] mul_y_bo;


mult multiplay(
    .clk_i(mul_clk_i),
	.rst_i(mul_rst_i),
	.a_bi(mul_a_bi),
	.b_bi(mul_b_bi),
	.start_i(mul_start_i),
	.busy_o(mul_busy_o),
	.y_bo(mul_y_bo)
);

integer i;

always@(posedge clk_c_i)
	if (rst_c_i) begin
		state <= BEGIN;
	end else begin
		case(state)
			BEGIN: if (start_c_i) begin
					//$display(" ## state = BEGIN,  x = %d ", x);
					busy_o <= 1;
					state <= STAGE_1;
					y <= 6;
					y_o <= 0;
				end
			STAGE_1: begin
			    //$display(" ## state = STAGE_1, x = %d ", x);
				begin
				    // calc y^2 = y * y
					mul_clk_i = 0; mul_rst_i = 1; mul_start_i = 1;
					mul_a_bi = y; mul_b_bi = y;
					#1 mul_clk_i = 1; mul_rst_i = 1;
					#1 mul_clk_i = 0; mul_rst_i = 0;
					for(i = 0; i < 10; i = i + 1) begin
						#1 mul_clk_i = 1;
						#1 mul_clk_i = 0;
					end
					// calc y^3 = y^2 * y 
					//$display(" ##  y_bo = %d ", mul_y_bo);
					mul_clk_i = 0; mul_rst_i = 1; mul_start_i = 1;
					mul_a_bi = mul_y_bo; mul_b_bi = y;
					#1 mul_clk_i = 1; mul_rst_i = 1;
					#1 mul_clk_i = 0; mul_rst_i = 0;
					for(i = 0; i < 10; i = i + 1) begin
						#1 mul_clk_i = 1;
						#1 mul_clk_i = 0;
					end
					//$display(" ##  y_bo = %d  x = %d y = %d", mul_y_bo, x, y);
					if (mul_y_bo <= x_i) begin
						y_o = y;
						busy_o = 0;
						state <= FINISH;
					end
					else y <= y - 1;
				end
			end
			FINISH : begin
			    y_o = y;
			    busy_o = 0;
			end
		endcase
	end
endmodule 

Схема тестирования -----------------------------------------------------------------------------------
module sqrt3_tb;
reg clk_c_i;
reg rst_c_i;
reg start_c_i;
reg [7:0] x_i;
wire res_o;
wire [7:0] s_o;

sqrt3 dut(.clk_c_i(clk_c_i),
		  .rst_c_i(rst_c_i),
		  .start_c_i(start_c_i),
		  .x_i(x_i),
		  .busy_o(res_o),
		  .y_o(s_o)
);

integer i, xx, bb, kol_ok, kol_error;

initial
	begin
		$display("Start testing ");
		// $monitor("c = %b, res = %d, r = %b, time = %0d", clk_c_i, s_o, res_o, $time);
		kol_ok = 0;
		kol_error = 0;
		for(xx = 0; xx <= 255; xx = xx + 1) begin
            clk_c_i = 0; rst_c_i = 1; start_c_i=1; x_i = xx;
            #10 clk_c_i = 1; rst_c_i = 1;
            #10 clk_c_i = 0; rst_c_i = 0;
            for (i = 0; i < 15; i = i + 1) begin
                #100 clk_c_i = 1;
                #100 clk_c_i = 0;
            end
            
            bb = 0;
            while(bb * bb * bb <= xx) begin
                bb = bb + 1;
            end
            bb = bb - 1;
            
            if(bb != s_o) begin 
                kol_error = kol_error + 1; 
                $display("~~~ Error number x = %d, real result = %d, expected result = %d, time = %0d", xx, s_o, bb, $time);
            end 
            else begin
                kol_ok = kol_ok + 1;
                $display("~~~ OK number x = %d, real result = %d, expected result = %d, time = %0d", xx, s_o, bb, $time);
            end
	   end
	   $display(" ~~~ Testing is finished ");
	   $display(" ~~~ kol_OK = %d, kol_Error = %d ", kol_ok, kol_error);
	   #10 $stop;
	end
endmodule 




















